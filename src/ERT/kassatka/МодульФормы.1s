Перем KS;

Процедура ПроверитьКаталогЛогов()
	
	Если ПустоеЗначение(КаталогЛогов)=1 Тогда 
		
		КаталогЛогов = КаталогИБ();
		
	КонецЕсли;
	
	Если Прав(КаталогЛогов,1)<>"\" Тогда 
		КаталогЛогов = КаталогЛогов+"\";
	КонецЕсли;
	
КонецПроцедуры

//Процедура ЗаписатьОтветВФайл(ИмяФайла, WinHttp)
//	
//	ПроверитьКаталогЛогов();
//			
// 	s = CreateObject("ADODB.Stream");
//    s.Mode = 3;
//    s.Type = 1;
//    s.Open();
//
//	Скрипт=СоздатьОбъект("MSScriptControl.ScriptControl"); 
//    Скрипт.language="vbscript";	
//    Скрипт.AddObject("s",s);
//    Скрипт.AddObject("x", WinHttp);
//    Скрипт.Eval("s.Write(x.responseBody)");
// 
//    s.SaveToFile( КаталогЛогов+ИмяФайла+".xml", 2);
//	Сообщить("Записан "+КаталогЛогов+ИмяФайла+".xml");	
//	
//КонецПроцедуры

Процедура ЗаписатьЗапросВФайл( ТекстФайла )
		
	ч=0;м=0;с=0;
	ТекущееВремя(ч,м,с);
	ИмяФайла = КаталогЛогов+Формат(ТекущаяДата(),"Д ГГГГММДД")+"_"+ч+"-"+м+"-"+с+".xml";
	// UTF сохраняет в кракозябры
	Текст = СоздатьОбъект("Текст");
	Текст.ДобавитьСтроку( ТекстФайла);
	Текст.Записать( ИмяФайла );
	Сообщить("Записан "+ИмяФайла);

КонецПроцедуры

Функция JsonDecode( Ответ )
	sc = CreateObject("ScriptControl");
	sc.Language = "JScript";
	json = sc.Eval("(" + Ответ  + ")");
	
	Возврат json;
КонецФункции
	

Функция ПолучитьТокен()
	
	//ДатаС = "2019-01-02 00:01:01";
	//ДатаПо = "2020-02-20 23:59:59";	
	ДатаС = ""+ДатаГод(НачДата)+"-"+ДатаМесяц(НачДата)+"-"+ДатаЧисло(НачДата)+" 00:01:01";
	ДатаПо = ""+ДатаГод(КонДата)+"-"+ДатаМесяц(КонДата)+"-"+ДатаЧисло(КонДата)+" 23:59:59";
	
	АдресРесурса = "/1c-api/v1/receipts?from=" + ДатаС + "&to=" + ДатаПо;
	
	Ответ = KS.SendGet("http://api.kassatka.link"+АдресРесурса, ApiKey, ДатаС, ДатаПо);
	
	Если ОтладкаЗапросов=1 Тогда 
		Сообщить("Ответ = "+Ответ);
	КонецЕсли;

	ТокенПолученный = JsonDecode(Ответ).response.process_key;	
	Сообщить("ТокенПолученный = "+ТокенПолученный);
	Возврат ТокенПолученный;
	
КонецФункции

Функция ПроверитьСтатус(ТокенПолученный)
	
	АдресРесурса = "/1c-api/v1/process/" + ТокенПолученный;

	Шапка = "api-token: apikey";	
	
	Ответ = KS.SendGet("http://api.kassatka.link"+АдресРесурса, ApiKey, "", "");
	
	Если ОтладкаЗапросов=1 Тогда 
		Сообщить( Ответ );
	КонецЕсли;
	
	Статус = JsonDecode(Ответ).response.status;
	Сообщить("Статус = "+Статус);

	Возврат Статус;
	
КонецФункции

Функция ПолучитьФайл(ТокенПолученный)
	
	АдресРесурса = "/1c-api/v1/download/"+ТокенПолученный; 
	
	Ответ = KS.SendGet("http://api.kassatka.link"+АдресРесурса, ApiKey, "", "" );
	
	Если ОтладкаЗапросов=1 Тогда 
		Сообщить( Ответ );
	КонецЕсли;

	ЗаписатьЗапросВФайл( Ответ );

	Если ОтладкаЗапросов=1 Тогда 
		Сообщить( Лев( СокрЛП( Ответ) , 450) );
	КонецЕсли;		

	Возврат Ответ;
	
КонецФункции


Функция ОтправитьФайлDll( Запрос )

	KS.SendPost("http://api.kassatka.link/1c-api/v1/nomenclature", ApiKey, Запрос );
	
КонецФункции


Процедура ЗагрузитьОтвет( XMLОтвет )
	
	xmlDoc = СоздатьОбъект("MSXML2.DOMDocument.6.0");
	xmlDoc.async = 0;
	xmlDoc.loadXML( XMLОтвет );
	Если (xmlDoc.parseError.errorCode <>  0) Тогда 
	   myErr = xmlDoc.parseError;
	   Сообщить("You have error " + myErr.reason);
	Иначе
	   //Сообщить(xmlDoc.xml);
	   
	   //GetInfoResponse = xmlDoc.selectSingleNode("//*[local-name() = 'GetInfoResponse']");
	   Сообщить("GetInfoResponse = "+XMLОтвет);
	КонецЕсли;

КонецПроцедуры

Процедура Пауза( Сек )
	Состояние("Пауза "+Сек+" секунд");
	
	СтрокаЗапроса = "ping -n 1 -w "+ ( 1000 * Сек ) + " 127.255.255.255";
    WshShell = СоздатьОбъект("WScript.Shell");
    WshShell.Run(СтрокаЗапроса, 0, -1);

	Состояние("");
КонецПроцедуры

//*******************************************
Процедура ЗагрузитьПродажи()
	
	Токен = ПолучитьТокен();
	ТокенПолученный = Токен;
	Файл = "";
	Если ПустоеЗначение(ТокенПолученный) = 0 Тогда 
		
		Пауза(5);		
		
		Статус = ПроверитьСтатус(ТокенПолученный);		
				
		//Если ( Статус = "new" ) ИЛИ ( Статус = "success" ) Тогда
			//ВремяОкончания = ТекущаяДата() + 10;
			//Пока ТекущаяДата() <= ВремяОкончания Цикл
				Файл = ПолучитьФайл(ТокенПолученный);				
			//КонецЦикла;
		//КонецЕсли;		
	КонецЕсли;
	
	Если ПустоеЗначение(Файл) = 1 Тогда
		Сообщить("Не удалось получить файл.");
		Возврат;
	Иначе
		//Сообщить( Лев( СокрЛП( Файл ), 450 ) );
		ЗагрузитьОтвет( Файл );
	КонецЕсли;
	

КонецПроцедуры

Функция ВыгрузитьТовар( Товар )
	
	Товар.ИспользоватьДату( НачДата );
	ТекЦена=0;
	Рез=глПолучитьРозничнуюЦену(Товар, ВыбКатегорияЦен, ТекЦена, НачДата);
	
	ТекстЗапроса = "<Product ParentCode='"+ Товар.Родитель.Код + "' Code='"+Товар.Код+"' Name='"+Товар.Наименование+
		"' UnitCode='796' UnitName='шт' Article='' Price='"+Формат(ТекЦена,"Ч15.2")+"' Barcode=''>
	|<Prices>
	|<Price PriceCode='"+ ВыбКатегорияЦен.Код +"' PriceType='"+ ВыбКатегорияЦен.Наименование +"' Price='"+ Формат(ТекЦена,"Ч15.2") +"' VAT='' IncludesVAT='Да'/>
	|</Prices>
	|<Barcodes>
	|	<Barcode Barcode=''/>
	|</Barcodes>
	|</Product>
	|";
	
	Возврат ТекстЗапроса;	
КонецФункции

//Функция ВыгрузитьГруппуТоваров( тз, НомерСтроки )
//	
//	Товар = тз.ПолучитьЗначение( НомерСтроки, "Товар");
//	
//	ТекстЗапроса = "
//	|<ProductGroup Code='"+ Товар.Код+"' Name='"+ Товар.Наименование +"' ParentCode='"+ Товар.Родитель.Код +"'>
//	|";
//		
//	Для А = НомерСтроки+1 По тз.КоличествоСтрок() Цикл
//		Товар = тз.ПолучитьЗначение(А, "Товар");
//		
//		Если Товар.ЭтоГруппа()=1 Тогда 
//			ТекстЗапроса = ТекстЗапроса + ВыгрузитьГруппуТоваров( тз, А );
//		Иначе
//			ТекстЗапроса = ТекстЗапроса + ВыгрузитьТовар( Товар );
//		КонецЕсли;
//	КонецЦикла;
//	
//	ТекстЗапроса = "</ProductGroup>
//	|";
//	
//	Возврат ТекстЗапроса;
//КонецФункции

//Процедура ВывестиГруппировку(ИТЗ, Ном)
//	
//	Если ИТЗ.НомерКолонки("Товар_Родитель") > 0 Тогда
//		НазваниеГруппировки = "Товар";
//		ЕстьГруппы = 1;
//	Иначе
//		//НазваниеГруппировки = СписокГруппировок.ПолучитьЗначение(Ном);
//	КонецЕсли;
//	
//	ИТЗ.ВыбратьСтроки();
//	Пока ИТЗ.ПолучитьСтроку()=1 Цикл
//		//ПечТекстСтроки = ИТЗ.ПолучитьЗначение(,НазваниеГруппировки);
//		//ТекРасшифровка = ПечТекстСтроки;
//		
//		НазваниеСекции = "Строка" + Ном;
//		
//		Прибавить = 1;
//		Если ЕстьГруппы = 1 Тогда
//			Если ИТЗ.__ЭтоГруппа__ = 1 Тогда
//				НазваниеСекции = НазваниеСекции + "Г";
//				Прибавить = 0;
//			КонецЕсли;    
//		КонецЕсли;
//		
//		//Если ПустоеЗначение(ПечТекстСтроки) = 1 Тогда
//		//	ПечТекстСтроки = "Не выбран";
//		//КонецЕсли;
//		
//		//Тут ничего сложного, см. типовые отчеты
//		//ровка);
//		
//		Если ИТЗ.НомерКолонки("тзПотомки") > 0 Тогда
//			Если ПустоеЗначение(ИТЗ.тзПотомки) = 0 Тогда
//				ВывестиГруппировку(ИТЗ.тзПотомки, Ном + Прибавить);
//			КонецЕсли;
//		КонецЕсли;
//	КонецЦикла;
//КонецПроцедуры //ВывестиГруппировку() 

Процедура ВыгрузитьТовары()
	
	Запрос = СоздатьОбъект("Запрос");
	Текст = "
	|Товар = Справочник.Номенклатура.ТекущийЭлемент;
	|Товар_Родитель = Справочник.Номенклатура.ТекущийЭлемент.Родитель;
	|Условие ( Товар В ВыбТовар );
	|
	//|Группировка Родитель;
	|Группировка Товар;
	|";
	
	Запрос.Выполнить(Текст);
	
	тз = СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(тз);
	//тз.Свернуть("Родитель", "");
	
	ТекстЗапроса = "<?xml version='1.0' encoding='UTF-8'?>
	|<ProductsGroups DropNomenclature='Да' CNO='' BalanceControl='Нет' Date='"+ НачДата +"'>
	|";
	ТекстЗапроса = ТекстЗапроса + "<ProductGroup Code='"+ВыбТовар.Код+"' Name='"+ ВыбТовар.Наименование +"' ParentCode=''>
	|";
	//Родитель="нет";
	Пока Запрос.Группировка(1)=1 Цикл
		Если Запрос.Товар.ЭтоГруппа()=1 Тогда 
			//Если Родитель <> Запрос.Спр.Родитель Тогда 
			//	Если Родитель <> "нет" Тогда 
			//		ТекстЗапроса = ТекстЗапроса+"
			//		|</ProductGroup>";
			//	КонецЕсли;
			//	ТекстЗапроса = ТекстЗапроса + "
			//	|<ProductGroup Code='"+Запрос.Спр.Код+"' Name='"+ Запрос.Спр.Наименование +"' ParentCode='"+ Запрос.Спр.Родитель.Код +"'>
			//	|";
			//	Родитель = Запрос.Спр;			
			//Иначе
			//	
			//КонецЕсли;
		Иначе
			ТекстЗапроса = ТекстЗапроса + ВыгрузитьТовар( Запрос.Товар );
		КонецЕсли;
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса+"
	|</ProductGroup>
	|</ProductsGroups>";
	
	//ИТЗ = СоздатьОбъект("ИндексированнаяТаблица");
	//ИТЗ.Загрузить(тз);
	//ИТЗ.Группировать("Товар:*&Товар","",1);
	//
	//ВывестиГруппировку(ИТЗ, 1);
	
	//ИТЗ.ВыбратьСтроку();
	//ИТЗ.ВыбратьСтроки();
	//Пока ИТЗ.ПолучитьСтроку() = 1 Цикл
	//	
	//КонецЦикла;
	//Для А = 1 По тз.КоличествоСтрок() Цикл	
	//	Товар = тз.ПолучитьЗначение( А, "Товар");
	//	Если Товар.ЭтоГруппа()=1 Тогда 
	//		ТекстЗапроса = ТекстЗапроса + ВыгрузитьГруппуТоваров( тз, А );
	//	Иначе
	//		ТекстЗапроса = ТекстЗапроса + ВыгрузитьТовар( Товар );
	//	КонецЕсли;
	//КонецЦикла;	
	
	ЗаписатьЗапросВФайл( ТекстЗапроса );
	
	ОтправитьФайлDll( ТекстЗапроса );
	
	//xmlParser = СоздатьОбъект("Msxml2.DOMDocument");
	//xmlParser.async = 0;
	//xmlParser.appendChild(xmlParser.createProcessingInstruction("xml", "version='1.0' encoding='windows-1251'"));
	//rootNode = xmlParser.appendChild(xmlParser.createElement("ROOT"))
	//////xmlParser.load "C:\Sample.xml";
	////rootPRODUCTS = xmlParser.documentElement
	////firstPRODUCT = xmlParser.documentElement.childNodes(0)
	//newPRODUCT = rootPRODUCTS.insertBefore(firstPRODUCT.cloneNode(True), firstPRODUCT)
	//newPRODUCT.setAttribute "import", "yes"
	//xmlParser.save("C:\Test.xml")
	
КонецПроцедуры

 // предопределенная процедура
 Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
 	Если ЗначениеЗакладки="Основной" Тогда
		Форма.ИспользоватьСлой("Основной");

	//ИначеЕсли ЗначениеЗакладки="Партии" Тогда
	//	Форма.ИспользоватьСлой("Основной, Партии");
	//	//ЗаполнитьПартии();
	//ИначеЕсли ЗначениеЗакладки="Производство" Тогда
	//	Форма.ИспользоватьСлой("Основной, Производство");
	//	//ЗаполнитьПартииПроизводства();
	//	//тз = ГМ.ЗаполнитьПартииПроизводства( СписокДокументов ); 
	//	тз = ГМ.ЗаполнитьПартииПроизводстваПоТзПартий( тзНеобходимыеПартии );
	//	тзПартииПроизводство.Загрузить( тз );
	//	тпПартииПроизводство.ОбновитьСтроки();
	Иначе
		Форма.ИспользоватьСлой("Параметры");
	КонецЕсли;
	
	Форма.Закладки.ТекущаяСтрока(НомерЗакладки);
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Основной");
	Форма.Закладки.ДобавитьЗначение("Параметры");

	Форма.ИспользоватьСлой("Основной");	
	
КонецПроцедуры

ApiKey = "3413094b-f2d8-4641-b452-1eefdd5e761f";
КаталогЛогов = "D:\1C\Краюха\logs\";

НачДата = НачГода(ТекущаяДата());
КонДата = ТекущаяДата();

//	//+phsin@kb99, 2018-10-09 13:18:35
//	Попытка
//		имяф=КаталогИБ()+"1cpp.dll";
//		ЗагрузитьВнешнююКомпоненту(имяф);
//		Сообщить("Загружена "+имяф);
//	Исключение
//		Сообщить("Ошибка при загрузке внешней компоненты: "+имяф);
//		Сообщить("Некоторые функции будут недоступны");
//	КонецПопытки;
//	Попытка
//		имяф=КаталогИБ()+"formex.dll";
//		ЗагрузитьВнешнююКомпоненту(имяф);
//
//		Сообщить("Загружена "+имяф);
//		Сервис = СоздатьОбъект("Сервис");
//		Сервис.ВключитьРаскраскуТаблиц();
//	Исключение
//		Сообщить("Ошибка при загрузке внешней компоненты: "+имяф);
//		Сообщить("Некоторые функции будут недоступны");
//	КонецПопытки;


	ПодключитьВнешнююКомпоненту("AddIn.kb99_kassatka");
	KS = СоздатьОбъект("AddIn.kb99_kassatka"); 
	ks.Инициализация();